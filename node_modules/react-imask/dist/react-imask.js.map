{"version":3,"file":"react-imask.js","sources":["../src/mixin.ts","../src/input.ts","../src/hook.ts"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport IMask from 'imask';\n\n\nexport\ntype Falsy = false | 0 | \"\" | null | undefined;\n\nexport\ntype MaskedElement = HTMLInputElement | HTMLTextAreaElement;\n\nexport\ntype ReactMaskedElement = React.HTMLProps<HTMLInputElement | HTMLTextAreaElement>;\n\nexport\ntype ReactMaskProps<\n  Opts extends IMask.AnyMaskedOptions = IMask.AnyMaskedOptions,\n  Unmask extends ('typed' | boolean) = false,\n  Value = Unmask extends 'typed' ? IMask.InputMask<Opts>['typedValue'] :\n    Unmask extends Falsy ? IMask.InputMask<Opts>['value'] :\n    IMask.InputMask<Opts>['unmaskedValue']\n> = {\n  onAccept?: (value: Value, maskRef: IMask.InputMask<Opts>, e?: InputEvent) => void;\n  onComplete?: (value: Value, maskRef: IMask.InputMask<Opts>, e?: InputEvent) => void;\n  unmask?: Unmask;\n  value?: Value;\n  inputRef?: (el: MaskedElement) => void;\n}\n\nconst MASK_PROPS: { [key in keyof (IMask.AllMaskedOptions & ReactMaskProps)]: unknown } = {\n  // common\n  mask: PropTypes.oneOfType([\n    PropTypes.array,\n    PropTypes.func,\n    PropTypes.string,\n    PropTypes.instanceOf(RegExp),\n    PropTypes.oneOf([Date, Number, IMask.Masked]),\n    PropTypes.instanceOf(IMask.Masked),\n  ]),\n  value: PropTypes.any,\n  unmask: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf(['typed']),\n  ]),\n  prepare: PropTypes.func,\n  validate: PropTypes.func,\n  commit: PropTypes.func,\n  overwrite: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf(['shift']),\n  ]),\n  eager: PropTypes.bool,\n\n  // events\n  onAccept: PropTypes.func,\n  onComplete: PropTypes.func,\n\n  // pattern\n  placeholderChar: PropTypes.string,\n  lazy: PropTypes.bool,\n  definitions: PropTypes.object,\n  blocks: PropTypes.object,\n\n  // date\n  pattern: PropTypes.string,\n  format: PropTypes.func,\n  parse: PropTypes.func,\n  autofix: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf(['pad']),\n  ]),\n\n  // number\n  radix: PropTypes.string,\n  thousandsSeparator: PropTypes.string,\n  mapToRadix: PropTypes.arrayOf(PropTypes.string),\n  scale: PropTypes.number,\n  signed: PropTypes.bool,\n  normalizeZeros: PropTypes.bool,\n  padFractionalZeros: PropTypes.bool,\n  min: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.instanceOf(Date),\n  ]),\n  max: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.instanceOf(Date),\n  ]),\n\n  // dynamic\n  dispatch: PropTypes.func,\n\n  // ref\n  inputRef: PropTypes.func\n};\n\nconst MASK_PROPS_NAMES = Object.keys(MASK_PROPS);\nconst NON_MASK_OPTIONS_PROPS_NAMES = ['value', 'unmask', 'onAccept', 'onComplete', 'inputRef'];\nconst MASK_OPTIONS_PROPS_NAMES = MASK_PROPS_NAMES.filter(pName =>\n  NON_MASK_OPTIONS_PROPS_NAMES.indexOf(pName) < 0\n);\n\nexport type IMaskMixinProps<\n  Opts extends IMask.AnyMaskedOptions = IMask.AnyMaskedOptions,\n  Unmask extends ('typed' | boolean) = false,\n  Value = Unmask extends 'typed' ? IMask.InputMask<Opts>['typedValue'] :\n    Unmask extends Falsy ? IMask.InputMask<Opts>['value'] :\n    IMask.InputMask<Opts>['unmaskedValue']\n> = Opts & ReactMaskProps<Opts, Unmask, Value>;\nexport type IMaskInputProps<\n  Opts extends IMask.AnyMaskedOptions = IMask.AnyMaskedOptions,\n  Unmask extends ('typed' | boolean) = false,\n  Value = Unmask extends 'typed' ? IMask.InputMask<Opts>['typedValue'] :\n    Unmask extends Falsy ? IMask.InputMask<Opts>['value'] :\n    IMask.InputMask<Opts>['unmaskedValue']\n> = ReactMaskedElement & IMaskMixinProps<Opts, Unmask, Value>;\n\nexport default function IMaskMixin<\n  Opts extends IMask.AnyMaskedOptions = IMask.AnyMaskedOptions,\n  Unmask extends ('typed' | boolean) = false,\n  Value = Unmask extends 'typed' ? IMask.InputMask<Opts>['typedValue'] :\n    Unmask extends Falsy ? IMask.InputMask<Opts>['value'] :\n    IMask.InputMask<Opts>['unmaskedValue']\n>(ComposedComponent: React.ComponentType<ReactMaskedElement>) {\n  const MaskedComponent = class extends React.Component<IMaskInputProps<Opts, Unmask, Value>> {\n    static displayName: string;\n    static propTypes: typeof MASK_PROPS;\n    \n    element: MaskedElement;\n    maskRef: IMask.InputMask<Opts>;\n    \n    constructor (props: IMaskInputProps<Opts, Unmask, Value>) {\n      super(props);\n      this._inputRef = this._inputRef.bind(this);\n    }\n\n    componentDidMount () {\n      if (!this.props.mask) return;\n\n      this.initMask();\n    }\n\n    componentDidUpdate () {\n      const props = this.props;\n      const maskOptions = this._extractMaskOptionsFromProps(props);\n      if (maskOptions.mask) {\n        if (this.maskRef) {\n          this.maskRef.updateOptions(maskOptions as Partial<Opts>); // TODO\n          if ('value' in props &&\n            (props.value !== this.maskValue ||\n              // handle cases like Number('') === 0,\n              // for details see https://github.com/uNmAnNeR/imaskjs/issues/134\n              (typeof props.value !== 'string' && this.maskRef.value === '') &&\n                !this.maskRef.el.isActive)\n          ) {\n            this.maskValue = props.value;\n          }\n        } else {\n          this.initMask(maskOptions as Opts); // TODO\n        }\n      } else {\n        this.destroyMask();\n        if ('value' in props) this.element.value = props.value as string;\n      }\n    }\n\n    componentWillUnmount () {\n      this.destroyMask();\n    }\n\n    _inputRef (el: MaskedElement){\n      this.element = el;\n      if (this.props.inputRef) this.props.inputRef(el);\n    }\n\n    initMask (maskOptions: Opts = this._extractMaskOptionsFromProps(this.props) as Opts) {\n      this.maskRef = IMask(this.element, maskOptions)\n        .on('accept', this._onAccept.bind(this))\n        .on('complete', this._onComplete.bind(this));\n\n      if ('value' in this.props) this.maskValue = this.props.value;\n    }\n\n    destroyMask () {\n      if (this.maskRef) {\n        this.maskRef.destroy();\n        delete this.maskRef;\n      }\n    }\n\n    _extractMaskOptionsFromProps (props: IMaskInputProps<Opts, Unmask, Value>): Opts {\n      const { ...cloneProps } = props;\n\n      // keep only mask options props\n      (Object.keys(cloneProps) as Array<keyof IMaskInputProps<Opts, Unmask, Value>>)\n        // TODO why need cast to string?\n        .filter(prop => MASK_OPTIONS_PROPS_NAMES.indexOf(prop as string) < 0)\n        .forEach(nonMaskProp => {\n          delete cloneProps[nonMaskProp];\n        });\n\n      return cloneProps as unknown as Opts;\n    }\n\n    _extractNonMaskProps (props: IMaskInputProps<Opts, Unmask, Value>) {\n      const { ...cloneProps } = props;\n\n      (MASK_PROPS_NAMES as Array<keyof IMaskInputProps<Opts, Unmask, Value>>).forEach(maskProp => {\n        delete cloneProps[maskProp];\n      });\n\n      return cloneProps;\n    }\n\n    get maskValue (): Value {\n      if (this.props.unmask === 'typed') return this.maskRef.typedValue as unknown as Value;\n      if (this.props.unmask) return this.maskRef.unmaskedValue as unknown as Value;\n      return this.maskRef.value as unknown as Value;\n    }\n\n    set maskValue (value: Value) {\n      value = (value == null ? '' : value) as Value;\n      if (this.props.unmask === 'typed') this.maskRef.typedValue = value as unknown as IMask.MaskedTypedValue<Opts['mask']>;\n      else if (this.props.unmask) this.maskRef.unmaskedValue = value as unknown as string;\n      else this.maskRef.value = value as unknown as string;\n    }\n\n    _onAccept (e?: InputEvent) {\n      if (this.props.onAccept && this.maskRef) this.props.onAccept(this.maskValue, this.maskRef, e);\n    }\n\n    _onComplete (e?: InputEvent) {\n      if (this.props.onComplete && this.maskRef) this.props.onComplete(this.maskValue, this.maskRef, e);\n    }\n\n    render () {\n      return React.createElement(ComposedComponent, {\n        ...this._extractNonMaskProps(this.props),\n        inputRef: this._inputRef,\n      });\n    }\n  };\n\n  const nestedComponentName = ComposedComponent.displayName || ComposedComponent.name || 'Component';\n  MaskedComponent.displayName = `IMask(${nestedComponentName})`;\n  MaskedComponent.propTypes = MASK_PROPS;\n\n  return MaskedComponent as React.ComponentType<IMaskInputProps<Opts, Unmask, Value>>;\n}\n","import React from 'react';\nimport IMask from 'imask';\nimport IMaskMixin, { IMaskInputProps, Falsy } from './mixin';\n\n\nconst InputComponent = <\n  Opts extends IMask.AnyMaskedOptions = IMask.AnyMaskedOptions,\n  Unmask extends ('typed' | boolean) = false,\n  Value = Unmask extends 'typed' ? IMask.InputMask<Opts>['typedValue'] :\n    Unmask extends Falsy ? IMask.InputMask<Opts>['value'] :\n    IMask.InputMask<Opts>['unmaskedValue']\n>({ inputRef, ...props }: IMaskInputProps<Opts, Unmask, Value>) =>\n  React.createElement('input', {\n    ...props,\n    ref: inputRef,\n  });\n\nconst IMaskInputClass = IMaskMixin(InputComponent);\n\nconst IMaskInput = <\n  Opts extends IMask.AnyMaskedOptions = IMask.AnyMaskedOptions,\n  Unmask extends ('typed' | boolean) = false,\n  Value = Unmask extends 'typed' ? IMask.InputMask<Opts>['typedValue'] :\n    Unmask extends Falsy ? IMask.InputMask<Opts>['value'] :\n    IMask.InputMask<Opts>['unmaskedValue']\n>(props: IMaskInputProps<Opts, Unmask, Value>): React.ReactElement<IMaskInputProps<Opts, Unmask, Value>> =>\n  React.createElement(IMaskInputClass as any, props);\n\n\nexport default IMaskInput;\n","import IMask from 'imask';\nimport { useEffect, useCallback, useState, useRef, Dispatch } from 'react';\nimport type { MutableRefObject } from 'react';\nimport type { ReactMaskProps, MaskedElement, Falsy } from './mixin';\n\n\nexport default\nfunction useIMask<\n  Opts extends IMask.AnyMaskedOptions = IMask.AnyMaskedOptions,\n  Unmask extends ('typed' | boolean) = false,\n  Value = Unmask extends 'typed' ? IMask.InputMask<Opts>['typedValue'] :\n    Unmask extends Falsy ? IMask.InputMask<Opts>['value'] :\n    IMask.InputMask<Opts>['unmaskedValue']\n>(\n  opts: Opts,\n  { onAccept, onComplete }: Pick<ReactMaskProps<Opts, Unmask, Value>, 'onAccept' | 'onComplete'> = {}\n): {\n  ref: MutableRefObject<MaskedElement>,\n  maskRef: MutableRefObject<IMask.InputMask<Opts>>,\n  value: IMask.InputMask<Opts>['value'],\n  setValue: Dispatch<IMask.InputMask<Opts>['value']>,\n  unmaskedValue: IMask.InputMask<Opts>['unmaskedValue'],\n  setUnmaskedValue: Dispatch<IMask.InputMask<Opts>['unmaskedValue']>,\n  typedValue: IMask.InputMask<Opts>['typedValue'],\n  setTypedValue: Dispatch<IMask.InputMask<Opts>['typedValue']>,\n} {\n  const ref = useRef(null);\n  const maskRef = useRef(null);\n  const [value, setValue] = useState<IMask.InputMask<Opts>['value']>('');\n  const [unmaskedValue, setUnmaskedValue] = useState<IMask.InputMask<Opts>['unmaskedValue']>('');\n  const [typedValue, setTypedValue] = useState<IMask.InputMask<Opts>['typedValue']>('' as IMask.InputMask<Opts>['typedValue']);\n\n  const _destroyMask = useCallback(() => {\n    maskRef.current?.destroy();\n    maskRef.current = null;\n  }, []);\n\n  const _onAccept = useCallback(\n    (event?: InputEvent) => {\n      if (!maskRef.current) return;\n\n      setTypedValue(maskRef.current.typedValue);\n      setUnmaskedValue(maskRef.current.unmaskedValue);\n      setValue(maskRef.current.value);\n      onAccept?.(maskRef.current.value, maskRef.current, event);\n    },\n    [onAccept],\n  );\n\n  const _onComplete = useCallback(\n    () => maskRef.current && onComplete?.(maskRef.current.value, maskRef.current),\n    [onComplete],\n  );\n\n  useEffect(() => {\n    const el = ref.current;\n\n    if (!el || !opts?.mask) return _destroyMask();\n\n    const mask = maskRef.current;\n\n    if (!mask) {\n      if (el && opts?.mask) {\n        maskRef.current = IMask(el, opts);\n\n        if (el.defaultValue !== maskRef.current.value) {\n          _onAccept();\n        }\n      }\n    } else {\n      mask?.updateOptions(opts);\n    }\n  }, [opts, _destroyMask, _onAccept]);\n\n  useEffect(() => {\n    if (!maskRef.current) return;\n\n    const mask = maskRef.current;\n\n    mask.on('accept', _onAccept);\n    mask.on('complete', _onComplete);\n\n    return () => {\n      mask.off('accept', _onAccept);\n      mask.off('complete', _onComplete);\n    };\n  }, [_onAccept, _onComplete]);\n\n  useEffect(() => {\n    const mask = maskRef.current;\n    if (mask && mask.value !== value) {\n      mask.value = value;\n    }\n  }, [value]);\n\n  useEffect(() => {\n    const mask = maskRef.current;\n    if (mask && mask.unmaskedValue !== unmaskedValue) {\n      mask.unmaskedValue = unmaskedValue;\n    }\n  }, [unmaskedValue]);\n\n  useEffect(() => {\n    const mask = maskRef.current;\n    if (mask) mask.typedValue = typedValue;\n  }, [typedValue]);\n\n  useEffect(() => _destroyMask, [_destroyMask]);\n\n  return {\n    ref,\n    maskRef,\n    value, setValue,\n    unmaskedValue, setUnmaskedValue,\n    typedValue, setTypedValue,\n  };\n}\n"],"names":["MASK_PROPS","mask","PropTypes","oneOfType","array","func","string","instanceOf","RegExp","oneOf","Date","Number","IMask","Masked","value","any","unmask","bool","prepare","validate","commit","overwrite","eager","onAccept","onComplete","placeholderChar","lazy","definitions","object","blocks","pattern","format","parse","autofix","radix","thousandsSeparator","mapToRadix","arrayOf","scale","number","signed","normalizeZeros","padFractionalZeros","min","max","dispatch","inputRef","MASK_PROPS_NAMES","Object","keys","NON_MASK_OPTIONS_PROPS_NAMES","MASK_OPTIONS_PROPS_NAMES","filter","pName","indexOf","IMaskMixin","ComposedComponent","MaskedComponent","props","_inputRef","bind","initMask","maskOptions","_extractMaskOptionsFromProps","maskRef","updateOptions","maskValue","el","isActive","destroyMask","element","on","_onAccept","_onComplete","destroy","cloneProps","prop","forEach","nonMaskProp","maskProp","typedValue","unmaskedValue","e","React","createElement","_extractNonMaskProps","Component","nestedComponentName","displayName","name","propTypes","InputComponent","ref","IMaskInputClass","IMaskInput","useIMask","opts","useRef","useState","setValue","setUnmaskedValue","setTypedValue","_destroyMask","useCallback","current","event","useEffect","defaultValue","off"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA6BA,IAAMA,UAAiF,GAAG;EACxF;EACAC,EAAAA,IAAI,EAAEC,6BAAS,CAACC,SAAV,CAAoB,CACxBD,6BAAS,CAACE,KADc,EAExBF,6BAAS,CAACG,IAFc,EAGxBH,6BAAS,CAACI,MAHc,EAIxBJ,6BAAS,CAACK,UAAV,CAAqBC,MAArB,CAJwB,EAKxBN,6BAAS,CAACO,KAAV,CAAgB,CAACC,IAAD,EAAOC,MAAP,EAAeC,yBAAK,CAACC,MAArB,CAAhB,CALwB,EAMxBX,6BAAS,CAACK,UAAV,CAAqBK,yBAAK,CAACC,MAA3B,CANwB,CAApB,CAFkF;EAUxFC,EAAAA,KAAK,EAAEZ,6BAAS,CAACa,GAVuE;EAWxFC,EAAAA,MAAM,EAAEd,6BAAS,CAACC,SAAV,CAAoB,CAC1BD,6BAAS,CAACe,IADgB,EAE1Bf,6BAAS,CAACO,KAAV,CAAgB,CAAC,OAAD,CAAhB,CAF0B,CAApB,CAXgF;EAexFS,EAAAA,OAAO,EAAEhB,6BAAS,CAACG,IAfqE;EAgBxFc,EAAAA,QAAQ,EAAEjB,6BAAS,CAACG,IAhBoE;EAiBxFe,EAAAA,MAAM,EAAElB,6BAAS,CAACG,IAjBsE;EAkBxFgB,EAAAA,SAAS,EAAEnB,6BAAS,CAACC,SAAV,CAAoB,CAC7BD,6BAAS,CAACe,IADmB,EAE7Bf,6BAAS,CAACO,KAAV,CAAgB,CAAC,OAAD,CAAhB,CAF6B,CAApB,CAlB6E;EAsBxFa,EAAAA,KAAK,EAAEpB,6BAAS,CAACe,IAtBuE;EAwBxF;EACAM,EAAAA,QAAQ,EAAErB,6BAAS,CAACG,IAzBoE;EA0BxFmB,EAAAA,UAAU,EAAEtB,6BAAS,CAACG,IA1BkE;EA4BxF;EACAoB,EAAAA,eAAe,EAAEvB,6BAAS,CAACI,MA7B6D;EA8BxFoB,EAAAA,IAAI,EAAExB,6BAAS,CAACe,IA9BwE;EA+BxFU,EAAAA,WAAW,EAAEzB,6BAAS,CAAC0B,MA/BiE;EAgCxFC,EAAAA,MAAM,EAAE3B,6BAAS,CAAC0B,MAhCsE;EAkCxF;EACAE,EAAAA,OAAO,EAAE5B,6BAAS,CAACI,MAnCqE;EAoCxFyB,EAAAA,MAAM,EAAE7B,6BAAS,CAACG,IApCsE;EAqCxF2B,EAAAA,KAAK,EAAE9B,6BAAS,CAACG,IArCuE;EAsCxF4B,EAAAA,OAAO,EAAE/B,6BAAS,CAACC,SAAV,CAAoB,CAC3BD,6BAAS,CAACe,IADiB,EAE3Bf,6BAAS,CAACO,KAAV,CAAgB,CAAC,KAAD,CAAhB,CAF2B,CAApB,CAtC+E;EA2CxF;EACAyB,EAAAA,KAAK,EAAEhC,6BAAS,CAACI,MA5CuE;EA6CxF6B,EAAAA,kBAAkB,EAAEjC,6BAAS,CAACI,MA7C0D;EA8CxF8B,EAAAA,UAAU,EAAElC,6BAAS,CAACmC,OAAV,CAAkBnC,6BAAS,CAACI,MAA5B,CA9C4E;EA+CxFgC,EAAAA,KAAK,EAAEpC,6BAAS,CAACqC,MA/CuE;EAgDxFC,EAAAA,MAAM,EAAEtC,6BAAS,CAACe,IAhDsE;EAiDxFwB,EAAAA,cAAc,EAAEvC,6BAAS,CAACe,IAjD8D;EAkDxFyB,EAAAA,kBAAkB,EAAExC,6BAAS,CAACe,IAlD0D;EAmDxF0B,EAAAA,GAAG,EAAEzC,6BAAS,CAACC,SAAV,CAAoB,CACvBD,6BAAS,CAACqC,MADa,EAEvBrC,6BAAS,CAACK,UAAV,CAAqBG,IAArB,CAFuB,CAApB,CAnDmF;EAuDxFkC,EAAAA,GAAG,EAAE1C,6BAAS,CAACC,SAAV,CAAoB,CACvBD,6BAAS,CAACqC,MADa,EAEvBrC,6BAAS,CAACK,UAAV,CAAqBG,IAArB,CAFuB,CAApB,CAvDmF;EA4DxF;EACAmC,EAAAA,QAAQ,EAAE3C,6BAAS,CAACG,IA7DoE;EA+DxF;EACAyC,EAAAA,QAAQ,EAAE5C,6BAAS,CAACG;EAhEoE,CAA1F;EAmEA,IAAM0C,gBAAgB,GAAGC,MAAM,CAACC,IAAP,CAAYjD,UAAZ,CAAzB;EACA,IAAMkD,4BAA4B,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,UAApB,EAAgC,YAAhC,EAA8C,UAA9C,CAArC;EACA,IAAMC,wBAAwB,GAAGJ,gBAAgB,CAACK,MAAjB,CAAwB,UAAAC,KAAK;EAAA,SAC5DH,4BAA4B,CAACI,OAA7B,CAAqCD,KAArC,IAA8C,CADc;EAAA,CAA7B,CAAjC;EAmBe,SAASE,UAAT,CAMbC,iBANa,EAM+C;EAC5D,MAAMC,eAAe;EAAA;;EAAA;;EAOnB,6BAAaC,KAAb,EAA0D;EAAA;;EAAA;;EACxD,gCAAMA,KAAN;EACA,YAAKC,SAAL,GAAiB,MAAKA,SAAL,CAAeC,IAAf,+BAAjB;EAFwD;EAGzD;;EAVkB;EAAA;EAAA,aAYnB,6BAAqB;EACnB,YAAI,CAAC,KAAKF,KAAL,CAAWzD,IAAhB,EAAsB;EAEtB,aAAK4D,QAAL;EACD;EAhBkB;EAAA;EAAA,aAkBnB,8BAAsB;EACpB,YAAMH,KAAK,GAAG,KAAKA,KAAnB;;EACA,YAAMI,WAAW,GAAG,KAAKC,4BAAL,CAAkCL,KAAlC,CAApB;;EACA,YAAII,WAAW,CAAC7D,IAAhB,EAAsB;EACpB,cAAI,KAAK+D,OAAT,EAAkB;EAChB,iBAAKA,OAAL,CAAaC,aAAb,CAA2BH,WAA3B,EADgB;;EAEhB,gBAAI,WAAWJ,KAAX,KACDA,KAAK,CAAC5C,KAAN,KAAgB,KAAKoD,SAArB;EAEC;EACC,mBAAOR,KAAK,CAAC5C,KAAb,KAAuB,QAAvB,IAAmC,KAAKkD,OAAL,CAAalD,KAAb,KAAuB,EAA3D,IACE,CAAC,KAAKkD,OAAL,CAAaG,EAAb,CAAgBC,QALnB,CAAJ,EAME;EACA,mBAAKF,SAAL,GAAiBR,KAAK,CAAC5C,KAAvB;EACD;EACF,WAXD,MAWO;EACL,iBAAK+C,QAAL,CAAcC,WAAd,EADK;EAEN;EACF,SAfD,MAeO;EACL,eAAKO,WAAL;EACA,cAAI,WAAWX,KAAf,EAAsB,KAAKY,OAAL,CAAaxD,KAAb,GAAqB4C,KAAK,CAAC5C,KAA3B;EACvB;EACF;EAxCkB;EAAA;EAAA,aA0CnB,gCAAwB;EACtB,aAAKuD,WAAL;EACD;EA5CkB;EAAA;EAAA,aA8CnB,mBAAWF,EAAX,EAA6B;EAC3B,aAAKG,OAAL,GAAeH,EAAf;EACA,YAAI,KAAKT,KAAL,CAAWZ,QAAf,EAAyB,KAAKY,KAAL,CAAWZ,QAAX,CAAoBqB,EAApB;EAC1B;EAjDkB;EAAA;EAAA,aAmDnB,oBAAqF;EAAA,YAA3EL,WAA2E,uEAAvD,KAAKC,4BAAL,CAAkC,KAAKL,KAAvC,CAAuD;EACnF,aAAKM,OAAL,GAAepD,yBAAK,CAAC,KAAK0D,OAAN,EAAeR,WAAf,CAAL,CACZS,EADY,CACT,QADS,EACC,KAAKC,SAAL,CAAeZ,IAAf,CAAoB,IAApB,CADD,EAEZW,EAFY,CAET,UAFS,EAEG,KAAKE,WAAL,CAAiBb,IAAjB,CAAsB,IAAtB,CAFH,CAAf;EAIA,YAAI,WAAW,KAAKF,KAApB,EAA2B,KAAKQ,SAAL,GAAiB,KAAKR,KAAL,CAAW5C,KAA5B;EAC5B;EAzDkB;EAAA;EAAA,aA2DnB,uBAAe;EACb,YAAI,KAAKkD,OAAT,EAAkB;EAChB,eAAKA,OAAL,CAAaU,OAAb;EACA,iBAAO,KAAKV,OAAZ;EACD;EACF;EAhEkB;EAAA;EAAA,aAkEnB,sCAA8BN,KAA9B,EAAiF;EAC/E,YAAWiB,UAAX,qBAA0BjB,KAA1B,EAD+E;;EAI9EV,QAAAA,MAAM,CAACC,IAAP,CAAY0B,UAAZ,CAAD;EAAA,SAEGvB,MAFH,CAEU,UAAAwB,IAAI;EAAA,iBAAIzB,wBAAwB,CAACG,OAAzB,CAAiCsB,IAAjC,IAAmD,CAAvD;EAAA,SAFd,EAGGC,OAHH,CAGW,UAAAC,WAAW,EAAI;EACtB,iBAAOH,UAAU,CAACG,WAAD,CAAjB;EACD,SALH;EAOA,eAAOH,UAAP;EACD;EA9EkB;EAAA;EAAA,aAgFnB,8BAAsBjB,KAAtB,EAAmE;EACjE,YAAWiB,UAAX,qBAA0BjB,KAA1B;EAECX,QAAAA,gBAAD,CAAwE8B,OAAxE,CAAgF,UAAAE,QAAQ,EAAI;EAC1F,iBAAOJ,UAAU,CAACI,QAAD,CAAjB;EACD,SAFD;EAIA,eAAOJ,UAAP;EACD;EAxFkB;EAAA;EAAA,WA0FnB,eAAwB;EACtB,YAAI,KAAKjB,KAAL,CAAW1C,MAAX,KAAsB,OAA1B,EAAmC,OAAO,KAAKgD,OAAL,CAAagB,UAApB;EACnC,YAAI,KAAKtB,KAAL,CAAW1C,MAAf,EAAuB,OAAO,KAAKgD,OAAL,CAAaiB,aAApB;EACvB,eAAO,KAAKjB,OAAL,CAAalD,KAApB;EACD,OA9FkB;EAAA,WAgGnB,aAAeA,KAAf,EAA6B;EAC3BA,QAAAA,KAAK,GAAIA,KAAK,IAAI,IAAT,GAAgB,EAAhB,GAAqBA,KAA9B;EACA,YAAI,KAAK4C,KAAL,CAAW1C,MAAX,KAAsB,OAA1B,EAAmC,KAAKgD,OAAL,CAAagB,UAAb,GAA0BlE,KAA1B,CAAnC,KACK,IAAI,KAAK4C,KAAL,CAAW1C,MAAf,EAAuB,KAAKgD,OAAL,CAAaiB,aAAb,GAA6BnE,KAA7B,CAAvB,KACA,KAAKkD,OAAL,CAAalD,KAAb,GAAqBA,KAArB;EACN;EArGkB;EAAA;EAAA,aAuGnB,mBAAWoE,CAAX,EAA2B;EACzB,YAAI,KAAKxB,KAAL,CAAWnC,QAAX,IAAuB,KAAKyC,OAAhC,EAAyC,KAAKN,KAAL,CAAWnC,QAAX,CAAoB,KAAK2C,SAAzB,EAAoC,KAAKF,OAAzC,EAAkDkB,CAAlD;EAC1C;EAzGkB;EAAA;EAAA,aA2GnB,qBAAaA,CAAb,EAA6B;EAC3B,YAAI,KAAKxB,KAAL,CAAWlC,UAAX,IAAyB,KAAKwC,OAAlC,EAA2C,KAAKN,KAAL,CAAWlC,UAAX,CAAsB,KAAK0C,SAA3B,EAAsC,KAAKF,OAA3C,EAAoDkB,CAApD;EAC5C;EA7GkB;EAAA;EAAA,aA+GnB,kBAAU;EACR,eAAOC,yBAAK,CAACC,aAAN,CAAoB5B,iBAApB,oBACF,KAAK6B,oBAAL,CAA0B,KAAK3B,KAA/B,CADE;EAELZ,UAAAA,QAAQ,EAAE,KAAKa;EAFV,WAAP;EAID;EApHkB;;EAAA;EAAA,IAAiBwB,yBAAK,CAACG,SAAvB,CAArB;;EAuHA,MAAMC,mBAAmB,GAAG/B,iBAAiB,CAACgC,WAAlB,IAAiChC,iBAAiB,CAACiC,IAAnD,IAA2D,WAAvF;EACAhC,EAAAA,eAAe,CAAC+B,WAAhB,mBAAuCD,mBAAvC;EACA9B,EAAAA,eAAe,CAACiC,SAAhB,GAA4B1F,UAA5B;EAEA,SAAOyD,eAAP;EACD;;;;ECnPD,IAAMkC,cAAc,GAAG,SAAjBA,cAAiB;EAAA,MAMnB7C,QANmB,QAMnBA,QANmB;EAAA,MAMNY,KANM;;EAAA,SAOrByB,yBAAK,CAACC,aAAN,CAAoB,OAApB,oBACK1B,KADL;EAEEkC,IAAAA,GAAG,EAAE9C;EAFP,KAPqB;EAAA,CAAvB;;EAYA,IAAM+C,eAAe,GAAGtC,UAAU,CAACoC,cAAD,CAAlC;;MAEMG,UAAU,GAAG,SAAbA,UAAa,CAMjBpC,KANiB;EAAA,SAOjByB,yBAAK,CAACC,aAAN,CAAoBS,eAApB,EAA4CnC,KAA5C,CAPiB;EAAA;;ECZnB,SAASqC,QAAT,CAOEC,IAPF,EAkBE;EAAA,iFAViG,EAUjG;EAAA,MAVEzE,QAUF,QAVEA,QAUF;EAAA,MAVYC,UAUZ,QAVYA,UAUZ;;EACA,MAAMoE,GAAG,GAAGK,YAAM,CAAC,IAAD,CAAlB;EACA,MAAMjC,OAAO,GAAGiC,YAAM,CAAC,IAAD,CAAtB;;EACA,kBAA0BC,cAAQ,CAAiC,EAAjC,CAAlC;EAAA;EAAA,MAAOpF,KAAP;EAAA,MAAcqF,QAAd;;EACA,mBAA0CD,cAAQ,CAAyC,EAAzC,CAAlD;EAAA;EAAA,MAAOjB,aAAP;EAAA,MAAsBmB,gBAAtB;;EACA,mBAAoCF,cAAQ,CAAsC,EAAtC,CAA5C;EAAA;EAAA,MAAOlB,UAAP;EAAA,MAAmBqB,aAAnB;;EAEA,MAAMC,YAAY,GAAGC,iBAAW,CAAC,YAAM;EAAA;;EACrC,wBAAAvC,OAAO,CAACwC,OAAR,sEAAiB9B,OAAjB;EACAV,IAAAA,OAAO,CAACwC,OAAR,GAAkB,IAAlB;EACD,GAH+B,EAG7B,EAH6B,CAAhC;;EAKA,MAAMhC,SAAS,GAAG+B,iBAAW,CAC3B,UAACE,KAAD,EAAwB;EACtB,QAAI,CAACzC,OAAO,CAACwC,OAAb,EAAsB;EAEtBH,IAAAA,aAAa,CAACrC,OAAO,CAACwC,OAAR,CAAgBxB,UAAjB,CAAb;EACAoB,IAAAA,gBAAgB,CAACpC,OAAO,CAACwC,OAAR,CAAgBvB,aAAjB,CAAhB;EACAkB,IAAAA,QAAQ,CAACnC,OAAO,CAACwC,OAAR,CAAgB1F,KAAjB,CAAR;EACAS,IAAAA,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAGyC,OAAO,CAACwC,OAAR,CAAgB1F,KAAnB,EAA0BkD,OAAO,CAACwC,OAAlC,EAA2CC,KAA3C,CAAR;EACD,GAR0B,EAS3B,CAAClF,QAAD,CAT2B,CAA7B;;EAYA,MAAMkD,WAAW,GAAG8B,iBAAW,CAC7B;EAAA,WAAMvC,OAAO,CAACwC,OAAR,KAAmBhF,UAAnB,aAAmBA,UAAnB,uBAAmBA,UAAU,CAAGwC,OAAO,CAACwC,OAAR,CAAgB1F,KAAnB,EAA0BkD,OAAO,CAACwC,OAAlC,CAA7B,CAAN;EAAA,GAD6B,EAE7B,CAAChF,UAAD,CAF6B,CAA/B;;EAKAkF,EAAAA,eAAS,CAAC,YAAM;EACd,QAAMvC,EAAE,GAAGyB,GAAG,CAACY,OAAf;EAEA,QAAI,CAACrC,EAAD,IAAO,EAAC6B,IAAD,aAACA,IAAD,eAACA,IAAI,CAAE/F,IAAP,CAAX,EAAwB,OAAOqG,YAAY,EAAnB;EAExB,QAAMrG,IAAI,GAAG+D,OAAO,CAACwC,OAArB;;EAEA,QAAI,CAACvG,IAAL,EAAW;EACT,UAAIkE,EAAE,IAAI6B,IAAJ,aAAIA,IAAJ,eAAIA,IAAI,CAAE/F,IAAhB,EAAsB;EACpB+D,QAAAA,OAAO,CAACwC,OAAR,GAAkB5F,yBAAK,CAACuD,EAAD,EAAK6B,IAAL,CAAvB;;EAEA,YAAI7B,EAAE,CAACwC,YAAH,KAAoB3C,OAAO,CAACwC,OAAR,CAAgB1F,KAAxC,EAA+C;EAC7C0D,UAAAA,SAAS;EACV;EACF;EACF,KARD,MAQO;EACLvE,MAAAA,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEgE,aAAN,CAAoB+B,IAApB;EACD;EACF,GAlBQ,EAkBN,CAACA,IAAD,EAAOM,YAAP,EAAqB9B,SAArB,CAlBM,CAAT;EAoBAkC,EAAAA,eAAS,CAAC,YAAM;EACd,QAAI,CAAC1C,OAAO,CAACwC,OAAb,EAAsB;EAEtB,QAAMvG,IAAI,GAAG+D,OAAO,CAACwC,OAArB;EAEAvG,IAAAA,IAAI,CAACsE,EAAL,CAAQ,QAAR,EAAkBC,SAAlB;EACAvE,IAAAA,IAAI,CAACsE,EAAL,CAAQ,UAAR,EAAoBE,WAApB;EAEA,WAAO,YAAM;EACXxE,MAAAA,IAAI,CAAC2G,GAAL,CAAS,QAAT,EAAmBpC,SAAnB;EACAvE,MAAAA,IAAI,CAAC2G,GAAL,CAAS,UAAT,EAAqBnC,WAArB;EACD,KAHD;EAID,GAZQ,EAYN,CAACD,SAAD,EAAYC,WAAZ,CAZM,CAAT;EAcAiC,EAAAA,eAAS,CAAC,YAAM;EACd,QAAMzG,IAAI,GAAG+D,OAAO,CAACwC,OAArB;;EACA,QAAIvG,IAAI,IAAIA,IAAI,CAACa,KAAL,KAAeA,KAA3B,EAAkC;EAChCb,MAAAA,IAAI,CAACa,KAAL,GAAaA,KAAb;EACD;EACF,GALQ,EAKN,CAACA,KAAD,CALM,CAAT;EAOA4F,EAAAA,eAAS,CAAC,YAAM;EACd,QAAMzG,IAAI,GAAG+D,OAAO,CAACwC,OAArB;;EACA,QAAIvG,IAAI,IAAIA,IAAI,CAACgF,aAAL,KAAuBA,aAAnC,EAAkD;EAChDhF,MAAAA,IAAI,CAACgF,aAAL,GAAqBA,aAArB;EACD;EACF,GALQ,EAKN,CAACA,aAAD,CALM,CAAT;EAOAyB,EAAAA,eAAS,CAAC,YAAM;EACd,QAAMzG,IAAI,GAAG+D,OAAO,CAACwC,OAArB;EACA,QAAIvG,IAAJ,EAAUA,IAAI,CAAC+E,UAAL,GAAkBA,UAAlB;EACX,GAHQ,EAGN,CAACA,UAAD,CAHM,CAAT;EAKA0B,EAAAA,eAAS,CAAC;EAAA,WAAMJ,YAAN;EAAA,GAAD,EAAqB,CAACA,YAAD,CAArB,CAAT;EAEA,SAAO;EACLV,IAAAA,GAAG,EAAHA,GADK;EAEL5B,IAAAA,OAAO,EAAPA,OAFK;EAGLlD,IAAAA,KAAK,EAALA,KAHK;EAGEqF,IAAAA,QAAQ,EAARA,QAHF;EAILlB,IAAAA,aAAa,EAAbA,aAJK;EAIUmB,IAAAA,gBAAgB,EAAhBA,gBAJV;EAKLpB,IAAAA,UAAU,EAAVA,UALK;EAKOqB,IAAAA,aAAa,EAAbA;EALP,GAAP;EAOD;;;;;;;;;;;;;;;;"}